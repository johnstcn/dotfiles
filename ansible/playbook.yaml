---
- name: Install dotfiles
  hosts: localhost
  connection: local
  gather_facts: true
  become: false

  vars:
    hostname: "{{ ansible_hostname | lower }}"

  tasks:
    - name: Ensure required packages are available for {{ hostname }}
      become: true
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      with_items:
        - git

    - name: Load vars for {{ hostname }}
      ansible.builtin.include_vars: "{{ hostname }}.yaml"

    - name: Copy files for {{ hostname }}
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items: "{{ dotfiles_files }}"

    - name: Ensure src dir is present on {{ hostname }}
      ansible.builtin.file:
        path: "{{ dotfiles_src_dir }}"
        state: directory
        mode: "0755"

    - name: Clone git repos for {{ hostname }}
      async: 600
      poll: 0
      ansible.builtin.git:
        repo: "{{ item.src }}"
        dest: "{{ item.dest }}"
        version: "{{ item.version }}"
        force: false
      with_items: "{{ dotfiles_git_repos }}"
      register: "async_git_status"

    - name: Fetch binaries for {{ hostname }}
      async: 600
      poll: 0
      ansible.builtin.get_url:
        url: "{{ item.url }}"
        dest: "{{ item.dest }}"
        mode: "0755"
      with_items: "{{ dotfiles_binaries }}"
      register: "async_binaries_status"

    - name: Install required packages for {{ hostname }}
      async: 600
      poll: 0
      become: true
      ansible.builtin.package:
        name: "{{ dotfiles_packages }}"
        state: present
      register: "async_package_status"

    - name: Wait for package installation to finish
      become: true
      async_status:
        jid: "{{ async_package_status.ansible_job_id }}"
      register: "package_result"
      until: "package_result.finished"
      retries: 30
      delay: 1

    - name: Wait for git to finish
      async_status:
        jid: "{{ item.ansible_job_id }}"
      with_items: "{{ async_git_status.results }}"
      register: "git_result"
      until: "git_result.finished"
      retries: 30
      delay: 1

    - name: Wait for binaries to finish
      async_status:
        jid: "{{ item.ansible_job_id }}"
      with_items: "{{ async_binaries_status.results }}"
      register: "binaries_result"
      until: "binaries_result.finished"
      retries: 30
      delay: 1
